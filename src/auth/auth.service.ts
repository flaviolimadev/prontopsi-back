import { Injectable, UnauthorizedException, ConflictException, BadRequestException } from '@nestjs/common';
import { JwtService } from '@nestjs/jwt';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import * as bcrypt from 'bcrypt';
import { User } from '../entities/user.entity';
import { CreateUserDto, LoginUserDto } from '../dto/user.dto';
import { EmailService } from '../services/email.service';
import { NotificationsService } from '../notifications/notifications.service';
import { NotificationType } from '../entities/notification.entity';
import { PasswordReset } from '../entities/password-reset.entity';
import { RequestPasswordResetDto, VerifyResetCodeDto, ResetPasswordDto, ResetPasswordWithCodeDto } from '../dto/password-reset.dto';

@Injectable()
export class AuthService {
  constructor(
    @InjectRepository(User)
    private userRepository: Repository<User>,
    @InjectRepository(PasswordReset)
    private passwordResetRepository: Repository<PasswordReset>,
    private jwtService: JwtService,
    private emailService: EmailService,
    private notificationsService: NotificationsService,
  ) {}

  async validateUser(email: string, password: string): Promise<any> {
    console.log('üîç AuthService: Validando usu√°rio para email:', email);
    
    const user = await this.userRepository.findOne({ where: { email } });
    
    if (!user) {
      console.log('‚ùå AuthService: Usu√°rio n√£o encontrado para email:', email);
      return null;
    }
    
    console.log('üîç AuthService: Usu√°rio encontrado no banco:', {
      id: user.id,
      email: user.email,
      status: user.status,
      emailVerified: user.emailVerified
    });
    
    const isPasswordValid = await bcrypt.compare(password, user.password);
    console.log('üîç AuthService: Senha v√°lida:', isPasswordValid);
    
    if (isPasswordValid) {
      const { password, ...result } = user;
      console.log('‚úÖ AuthService: Valida√ß√£o bem-sucedida para:', email);
      return result;
    }
    
    console.log('‚ùå AuthService: Senha inv√°lida para email:', email);
    return null;
  }

  async login(loginDto: LoginUserDto) {
    console.log('üîç AuthService: Iniciando login para email:', loginDto.email);
    
    const user = await this.validateUser(loginDto.email, loginDto.password);
    
    if (!user) {
      console.log('‚ùå AuthService: Credenciais inv√°lidas para email:', loginDto.email);
      throw new UnauthorizedException('Credenciais inv√°lidas');
    }

    console.log('üîç AuthService: Usu√°rio encontrado:', {
      id: user.id,
      email: user.email,
      status: user.status,
      emailVerified: user.emailVerified
    });

    // Verificar se o email foi verificado (prioridade sobre status)
    if (!user.emailVerified) {
      console.log('‚ùå AuthService: Email n√£o verificado para:', loginDto.email);
      throw new UnauthorizedException('Email n√£o verificado');
    }

    // Verificar se o usu√°rio est√° ativo
    if (user.status !== 1) {
      console.log('‚ùå AuthService: Usu√°rio inativo (status:', user.status, ') para email:', loginDto.email);
      throw new UnauthorizedException('Usu√°rio inativo');
    }

    console.log('‚úÖ AuthService: Login bem-sucedido para:', loginDto.email);

    const payload = { 
      sub: user.id, 
      email: user.email,
      code: user.code 
    };

    return {
      token: this.jwtService.sign(payload),
      user: {
        id: user.id,
        nome: user.nome,
        sobrenome: user.sobrenome,
        email: user.email,
        code: user.code,
        contato: user.contato,
        status: user.status,
        pontos: user.pontos,
        nivelId: user.nivelId,
        planoId: user.planoId,
        avatar: user.avatar,
        descricao: user.descricao,
        referredAt: user.referredAt,
        emailVerified: user.emailVerified,
        createdAt: user.createdAt,
        updatedAt: user.updatedAt,
      },
    };
  }

  async register(createUserDto: CreateUserDto) {
    console.log('üîç AuthService: Iniciando registro para email:', createUserDto.email);
    
    // Validar campos obrigat√≥rios
    if (!createUserDto.nome || !createUserDto.sobrenome || !createUserDto.email || 
        !createUserDto.password || !createUserDto.contato) {
      console.log('‚ùå AuthService: Campos obrigat√≥rios faltando para:', createUserDto.email);
      throw new BadRequestException('Nome, sobrenome, email, senha e contato s√£o obrigat√≥rios');
    }

    // Verificar se o email j√° existe
    const existingUser = await this.userRepository.findOne({
      where: { email: createUserDto.email },
    });

    if (existingUser) {
      console.log('‚ùå AuthService: Email j√° cadastrado:', createUserDto.email);
      throw new ConflictException('Email j√° cadastrado');
    }

    console.log('‚úÖ AuthService: Email dispon√≠vel para registro:', createUserDto.email);

    // Verificar se o c√≥digo de refer√™ncia existe (se fornecido)
    if (createUserDto.referredAt) {
      const referredUser = await this.userRepository.findOne({
        where: { code: createUserDto.referredAt },
      });

      if (!referredUser) {
        console.log('‚ùå AuthService: C√≥digo de refer√™ncia inv√°lido:', createUserDto.referredAt);
        throw new ConflictException('C√≥digo de refer√™ncia inv√°lido');
      }
      
      console.log('‚úÖ AuthService: C√≥digo de refer√™ncia v√°lido:', createUserDto.referredAt);
    }

    // Criar hash da senha
    const saltRounds = 10;
    const hashedPassword = await bcrypt.hash(createUserDto.password, saltRounds);

    // Gerar c√≥digo de verifica√ß√£o
    const verificationCode = this.generateVerificationCode();
    const verificationExpires = new Date();
    verificationExpires.setMinutes(verificationExpires.getMinutes() + 10); // 10 minutos

    // Criar usu√°rio
    const user = this.userRepository.create({
      ...createUserDto,
      password: hashedPassword,
      status: 0, // Usu√°rio inativo at√© verificar email
      pontos: createUserDto.pontos ?? 0,
      nivelId: createUserDto.nivelId ?? 1,
      emailVerified: false,
      emailVerificationCode: verificationCode,
      emailVerificationExpires: verificationExpires,
    });

    // O c√≥digo ser√° gerado automaticamente pelo subscriber
    const savedUser = await this.userRepository.save(user);

    console.log('‚úÖ AuthService: Usu√°rio salvo no banco:', {
      id: savedUser.id,
      email: savedUser.email,
      status: savedUser.status,
      emailVerified: savedUser.emailVerified
    });

    // Enviar email de verifica√ß√£o
    try {
      await this.emailService.sendEmailVerificationCode(
        savedUser.email,
        savedUser.nome,
        verificationCode
      );
      console.log('‚úÖ AuthService: Email de verifica√ß√£o enviado para:', savedUser.email);
    } catch (error) {
      // Log do erro mas n√£o falhar o registro
      console.error('‚ùå AuthService: Erro ao enviar email de verifica√ß√£o:', error);
    }

    const { password, emailVerificationCode, ...userWithoutPassword } = savedUser;

    console.log('‚úÖ AuthService: Registro conclu√≠do com sucesso para:', savedUser.email);

    return {
      message: 'Usu√°rio registrado com sucesso. Verifique seu email para ativar sua conta.',
      user: userWithoutPassword,
      requiresVerification: true,
    };
  }

  /**
   * Gera um c√≥digo de verifica√ß√£o de 6 d√≠gitos
   */
  private generateVerificationCode(): string {
    return Math.floor(100000 + Math.random() * 900000).toString();
  }

  /**
   * Verifica o c√≥digo de verifica√ß√£o de email
   */
  async verifyEmail(email: string, verificationCode: string) {
    console.log('üîç AuthService: Iniciando verifica√ß√£o de email:', email);
    console.log('üîç AuthService: C√≥digo recebido:', verificationCode);
    
    const user = await this.userRepository.findOne({
      where: { email },
    });

    if (!user) {
      console.log('‚ùå AuthService: Usu√°rio n√£o encontrado para email:', email);
      throw new BadRequestException('Usu√°rio n√£o encontrado');
    }

    console.log('üîç AuthService: Usu√°rio encontrado:', {
      id: user.id,
      email: user.email,
      emailVerified: user.emailVerified,
      hasVerificationCode: !!user.emailVerificationCode,
      verificationExpires: user.emailVerificationExpires
    });

    if (user.emailVerified) {
      console.log('‚ùå AuthService: Email j√° verificado para:', email);
      throw new BadRequestException('Email j√° foi verificado');
    }

    if (!user.emailVerificationCode) {
      console.log('‚ùå AuthService: C√≥digo de verifica√ß√£o n√£o encontrado para:', email);
      throw new BadRequestException('C√≥digo de verifica√ß√£o n√£o encontrado');
    }

    if (user.emailVerificationCode !== verificationCode) {
      console.log('‚ùå AuthService: C√≥digo inv√°lido para:', email, 'Esperado:', user.emailVerificationCode, 'Recebido:', verificationCode);
      throw new BadRequestException('C√≥digo de verifica√ß√£o inv√°lido');
    }

    if (user.emailVerificationExpires && user.emailVerificationExpires < new Date()) {
      console.log('‚ùå AuthService: C√≥digo expirado para:', email, 'Expira em:', user.emailVerificationExpires);
      throw new BadRequestException('C√≥digo de verifica√ß√£o expirado');
    }

    console.log('‚úÖ AuthService: C√≥digo v√°lido, ativando usu√°rio:', email);

    // Ativar usu√°rio
    await this.userRepository.update(user.id, {
      emailVerified: true,
      status: 1,
      emailVerificationCode: null,
      emailVerificationExpires: null,
    });

    console.log('‚úÖ AuthService: Usu√°rio ativado com sucesso:', email);

    // Enviar email de boas-vindas
    try {
      await this.emailService.sendWelcomeEmail(user.email, user.nome);
      console.log('‚úÖ AuthService: Email de boas-vindas enviado para:', user.email);
    } catch (error) {
      console.error('‚ùå AuthService: Erro ao enviar email de boas-vindas:', error);
      // N√£o falhar o processo se o email n√£o for enviado
    }

    // Criar notifica√ß√£o de boas-vindas
    try {
      await this.notificationsService.createSystemNotification(
        user.id,
        'Bem-vindo ao ProntuPsi! üéâ',
        'Sua conta foi ativada com sucesso. Comece a usar todas as funcionalidades do sistema!',
        NotificationType.SUCCESS,
        '/dashboard'
      );
      console.log('‚úÖ AuthService: Notifica√ß√£o de boas-vindas criada para:', user.id);
    } catch (error) {
      console.error('‚ùå AuthService: Erro ao criar notifica√ß√£o de boas-vindas:', error);
      // N√£o falhar o processo se a notifica√ß√£o n√£o for criada
    }

    // Gerar token JWT
    const payload = { 
      sub: user.id, 
      email: user.email,
      code: user.code 
    };

    const { password, emailVerificationCode, ...userWithoutPassword } = user;

    return {
      message: 'Email verificado com sucesso!',
      token: this.jwtService.sign(payload),
      user: {
        ...userWithoutPassword,
        emailVerified: true,
        status: 1,
      },
    };
  }

  /**
   * Reenvia c√≥digo de verifica√ß√£o
   */
  async resendVerificationCode(email: string) {
    const user = await this.userRepository.findOne({
      where: { email },
    });

    if (!user) {
      throw new BadRequestException('Usu√°rio n√£o encontrado');
    }

    if (user.emailVerified) {
      throw new BadRequestException('Email j√° foi verificado');
    }

    // Gerar novo c√≥digo de verifica√ß√£o
    const verificationCode = this.generateVerificationCode();
    const verificationExpires = new Date();
    verificationExpires.setMinutes(verificationExpires.getMinutes() + 10); // 10 minutos

    // Atualizar c√≥digo no banco
    await this.userRepository.update(user.id, {
      emailVerificationCode: verificationCode,
      emailVerificationExpires: verificationExpires,
    });

    // Enviar novo email de verifica√ß√£o
    try {
      await this.emailService.sendEmailVerificationCode(
        user.email,
        user.nome,
        verificationCode
      );
    } catch (error) {
      console.error('Erro ao reenviar email de verifica√ß√£o:', error);
      throw new BadRequestException('Erro ao enviar email de verifica√ß√£o');
    }

    return {
      message: 'Novo c√≥digo de verifica√ß√£o enviado com sucesso',
    };
  }

  async logout(userId: string) {
    // Em uma implementa√ß√£o mais robusta, voc√™ pode invalidar o token
    // Por enquanto, apenas retornamos sucesso
    return { message: 'Logout realizado com sucesso' };
  }

  async getProfile(userId: string) {
    const user = await this.userRepository.findOne({ where: { id: userId } });
    
    if (!user) {
      throw new UnauthorizedException('Usu√°rio n√£o encontrado');
    }

    const { password, ...userWithoutPassword } = user;
    return userWithoutPassword;
  }

  async updateProfile(userId: string, updateUserDto: any) {
    const user = await this.userRepository.findOne({ where: { id: userId } });
    
    if (!user) {
      throw new UnauthorizedException('Usu√°rio n√£o encontrado');
    }

    // Se estiver atualizando o email, verificar se j√° existe
    if (updateUserDto.email && updateUserDto.email !== user.email) {
      const existingUser = await this.userRepository.findOne({
        where: { email: updateUserDto.email },
      });

      if (existingUser) {
        throw new ConflictException('Email j√° cadastrado');
      }
    }

    // Se estiver atualizando a senha, fazer hash
    if (updateUserDto.password) {
      const saltRounds = 10;
      updateUserDto.password = await bcrypt.hash(updateUserDto.password, saltRounds);
    }

    // Atualizar usu√°rio
    await this.userRepository.update(userId, updateUserDto);
    
    // Retornar usu√°rio atualizado
    const updatedUser = await this.userRepository.findOne({ where: { id: userId } });
    
    if (!updatedUser) {
      throw new UnauthorizedException('Erro ao atualizar usu√°rio');
    }
    
    const { password, ...userWithoutPassword } = updatedUser;
    
    return userWithoutPassword;
  }

  async getUserByCode(code: string) {
    const user = await this.userRepository.findOne({ where: { code } });
    
    if (!user) {
      throw new UnauthorizedException('Usu√°rio n√£o encontrado');
    }

    const { password, ...userWithoutPassword } = user;
    return userWithoutPassword;
  }

  async changePassword(userId: string, changePasswordDto: { currentPassword: string; newPassword: string }) {
    const user = await this.userRepository.findOne({ where: { id: userId } });
    
    if (!user) {
      throw new UnauthorizedException('Usu√°rio n√£o encontrado');
    }

    // Verificar se a senha atual est√° correta
    const isCurrentPasswordValid = await bcrypt.compare(changePasswordDto.currentPassword, user.password);
    
    if (!isCurrentPasswordValid) {
      throw new UnauthorizedException('Senha atual incorreta');
    }

    // Criar hash da nova senha
    const saltRounds = 10;
    const hashedNewPassword = await bcrypt.hash(changePasswordDto.newPassword, saltRounds);

    // Atualizar a senha
    await this.userRepository.update(userId, { password: hashedNewPassword });
    
    return {
      message: 'Senha alterada com sucesso',
    };
  }

  /**
   * Solicita reset de senha
   */
  async requestPasswordReset(requestDto: RequestPasswordResetDto) {
    console.log('üîç AuthService: Iniciando solicita√ß√£o de reset de senha para:', requestDto.email);
    
    const user = await this.userRepository.findOne({ where: { email: requestDto.email } });
    
    if (!user) {
      // Por seguran√ßa, n√£o revelar se o email existe ou n√£o
      console.log('üîç AuthService: Email n√£o encontrado (n√£o revelado ao usu√°rio):', requestDto.email);
      return { message: 'Se o email existir, voc√™ receber√° um c√≥digo de recupera√ß√£o' };
    }

    // Invalidar resets anteriores do usu√°rio
    await this.passwordResetRepository.update(
      { userId: user.id, used: false },
      { used: true }
    );

    // Gerar c√≥digo de reset
    const resetCode = this.generateResetCode();
    const resetToken = this.generateResetToken();
    const expiresAt = new Date();
    expiresAt.setHours(expiresAt.getHours() + 1); // 1 hora de validade

    // Salvar reset no banco
    const passwordReset = this.passwordResetRepository.create({
      userId: user.id,
      resetToken,
      resetCode,
      expiresAt,
      used: false,
    });

    await this.passwordResetRepository.save(passwordReset);

    console.log('‚úÖ AuthService: Reset de senha criado para:', user.email);

    // Enviar email de recupera√ß√£o
    try {
      await this.emailService.sendPasswordResetEmail(
        user.email,
        resetToken,
        resetCode,
        user.nome
      );
      console.log('‚úÖ AuthService: Email de reset de senha enviado para:', user.email);
    } catch (error) {
      console.error('‚ùå AuthService: Erro ao enviar email de reset de senha:', error);
      throw new BadRequestException('Erro ao enviar email de recupera√ß√£o');
    }

    return { message: 'C√≥digo de recupera√ß√£o enviado com sucesso' };
  }

  /**
   * Verifica c√≥digo de reset
   */
  async verifyResetCode(verifyDto: VerifyResetCodeDto) {
    console.log('üîç AuthService: Verificando c√≥digo de reset para:', verifyDto.email);
    
    const user = await this.userRepository.findOne({ where: { email: verifyDto.email } });
    
    if (!user) {
      throw new BadRequestException('Usu√°rio n√£o encontrado');
    }

    const passwordReset = await this.passwordResetRepository.findOne({
      where: {
        userId: user.id,
        resetCode: verifyDto.code,
        used: false,
      },
    });

    if (!passwordReset) {
      throw new BadRequestException('C√≥digo inv√°lido ou expirado');
    }

    if (passwordReset.expiresAt < new Date()) {
      throw new BadRequestException('C√≥digo expirado');
    }

    console.log('‚úÖ AuthService: C√≥digo de reset v√°lido para:', user.email);

    return {
      message: 'C√≥digo v√°lido',
      token: passwordReset.resetToken,
    };
  }

  /**
   * Reseta senha com c√≥digo
   */
  async resetPasswordWithCode(resetDto: ResetPasswordWithCodeDto) {
    console.log('üîç AuthService: Resetando senha com c√≥digo para:', resetDto.email);
    
    const user = await this.userRepository.findOne({ where: { email: resetDto.email } });
    
    if (!user) {
      throw new BadRequestException('Usu√°rio n√£o encontrado');
    }

    const passwordReset = await this.passwordResetRepository.findOne({
      where: {
        userId: user.id,
        resetCode: resetDto.code,
        used: false,
      },
    });

    if (!passwordReset) {
      throw new BadRequestException('C√≥digo inv√°lido');
    }

    if (passwordReset.expiresAt < new Date()) {
      throw new BadRequestException('C√≥digo expirado');
    }

    // Criar hash da nova senha
    const saltRounds = 10;
    const hashedNewPassword = await bcrypt.hash(resetDto.newPassword, saltRounds);

    // Atualizar a senha
    await this.userRepository.update(user.id, { password: hashedNewPassword });

    // Marcar reset como usado
    await this.passwordResetRepository.update(passwordReset.id, { used: true });

    console.log('‚úÖ AuthService: Senha resetada com sucesso para:', user.email);

    // Criar notifica√ß√£o de seguran√ßa
    try {
      await this.notificationsService.createSystemNotification(
        user.id,
        'üîê Senha Alterada',
        'Sua senha foi alterada com sucesso. Se voc√™ n√£o fez essa altera√ß√£o, entre em contato conosco imediatamente.',
        NotificationType.WARNING,
        '/configuracoes'
      );
    } catch (error) {
      console.error('‚ùå AuthService: Erro ao criar notifica√ß√£o de seguran√ßa:', error);
    }

    return { message: 'Senha alterada com sucesso' };
  }

  /**
   * Gera c√≥digo de reset de 6 d√≠gitos
   */
  private generateResetCode(): string {
    return Math.floor(100000 + Math.random() * 900000).toString();
  }

  /**
   * Gera token de reset seguro
   */
  private generateResetToken(): string {
    return Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);
  }
} 