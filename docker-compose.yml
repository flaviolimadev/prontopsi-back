# Docker Compose para ProntuPsi Backend
version: '3.8'

services:
  prontupsi-backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: prontupsi-backend
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      # Database
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-password}
      - DB_NAME=${DB_NAME:-prontopsi_db}
      # JWT
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN:-7d}
      # CORS
      - FRONTEND_URL=${FRONTEND_URL:-http://localhost:3000}
    volumes:
      - uploads-data:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - prontupsi-network

  postgres:
    image: postgres:15-alpine
    container_name: prontupsi-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${DB_USER:-postgres}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-password}
      - POSTGRES_DB=${DB_NAME:-prontopsi_db}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - prontupsi-network

volumes:
  postgres-data:
    driver: local
  uploads-data:
    driver: local

networks:
  prontupsi-network:
    driver: bridge